#!/usr/bin/env node

var http = require('https'),
  fs = require('fs'),
  read = require('read'),
  cacheFileDir = process.env['HOME']+'/.ob-init',
  cacheFileName = cacheFileDir+'/modules',
  file;

var processRepo = function (repo, credentials, file) {
  console.log('processing repo', repo);
  var options = {
    host: 'code.openbravo.com',
    port: 443,
    method: 'GET',
    path: '/erp/' + repo,
    headers: {
      'Authorization': 'Basic ' + new Buffer(credentials.user + ':' +
        credentials
        .password).toString('base64')
    }
  }
  var mods = [], repoContent = '';
  var req = http.request(options, function (res) {
    console.log('STATUS: ' + res.statusCode);
    console.log('HEADERS: ' + JSON.stringify(res.headers));
    res.setEncoding('utf8');
    res.on('data', function (chunk) {
      repoContent += chunk;
    });
  });

  var getModuleId = function (moduleInfo) {
    console.log('get id', moduleInfo);

    var opts = {
      host: 'code.openbravo.com',
      port: 443,
      method: 'GET',
      path: '/erp/' + repo + '/' + moduleInfo.module + '/file/' + moduleInfo.changeset + '/src-db/database/sourcedata/AD_MODULE.xml',
      headers: {
        'Authorization': 'Basic ' + new Buffer(credentials.user + ':' +
          credentials.password).toString('base64')
      }
    }, modContent = '';

    // console.log('r:', opts)

    var req = http.request(opts, function (res) {
      res.setEncoding('utf8');
      res.on('data', function (chunk) {
        modContent += chunk;
      });
    });
    req.on('response', function (r) {
      r.on('end', function () {
        var lines = modContent.split('\n'),
          i, line, id, found;
        for (i = 0; i < lines.length; i++) {
          line = lines[i];
          if (line.indexOf('--&gt;&lt;AD_MODULE&gt;') !== -1) {
            found = true;
            id = line.substr(line.indexOf('&lt;!--') + 7).replace(
              '--&gt;&lt;AD_MODULE&gt;</span>', '')
            console.log('  ',moduleInfo.module, id);
            fs.write(file, JSON.stringify({
              module: moduleInfo.module,
              id: id,
              repo: repo
            }) + '\n');
            return;
          }
        }
        if (!found) {
          console.log('  not found id for ', moduleInfo.module)
        }
      });
    });
    req.end();
  }

  req.on('error', function (e) {
    console.log('problem with request: ' + e.message, e);
  });

  req.on('response', function (r) {
   // console.log('completed response for', repo);
    r.on('end', function () {

      var lines = repoContent.split('\n'),
        i, line, module;

      fs.writeFileSync(cacheFileDir+'/repo-'+repo+'.html', repoContent, 'utf8');

      for (i = 0; i < lines.length; i++) {
        line = lines[i];
        if (line.indexOf('<a class="list"') === -1) {
          continue;
        }
        if (line.indexOf('/">') === -1) {
          console.warn('Incomplete line, skipping it:',line);
          continue;
        }
        module = line.substring(line.indexOf('href') + 6).replace('/erp/' +
          repo + '/', '').replace('/">', '');
        mods.push(module);
      }

      for (i = 0; i < mods.length; i++) {
        getModuleId(
          {
            module: mods[i],
            changeset: 'tip'
          }
        );
      }
    })
  });

  req.end();
}

if (!fs.existsSync(cacheFileName)) {
  console.log('Regenerating modules file...');
} else {
  console.log('Generating modules file...')
}

if (!fs.existsSync(cacheFileDir)){
  fs.mkdirSync(cacheFileDir);
}

  read({
    prompt: 'User: '
  }, function (er, u) {
    var credentials = {};
    credentials.user = u;
    read({
      prompt: 'Password: ',
      silent: true
    }, function (er, p) {
    	var file = fs.openSync(cacheFileName, 'w');
      credentials.password = p;
      processRepo('mods', credentials, file);
      processRepo('pmods', credentials, file);
    });
  });
