#!/usr/bin/env node

var fs = require('fs'),
  xml2js = require('xml2json'),
  pd = require('pretty-data').pd,
  optimist = require('optimist')
    .usage('Initializes development Openbravo instance')
    .alias('db', 'd')
    .alias('help', 'h')
    .describe('db', 'database name')
    .describe('help', 'displays this help'),
  argv = optimist.argv,
  red = '\033[31m',
  reset = '\033[0m',
  events = require('events'),
  eventEmiter,
  Init,
  templates = [
    'config/Openbravo.properties',
    'config/log4j.lcf',
    'config/Format.xml',
    '.settings/org.eclipse.wst.common.component',
    '.classpath',
    'src-test/.classpath'
  ];

Init = {
  checkOBWorkspace: function () {
    return fs.existsSync('modules') && fs.existsSync('config');
  },

  copyTemplates: function (templates) {
    var t, template, replacements;

    for (t = 0; t < templates.length; t++) {
      template = templates[t];
      if (fs.existsSync(template + '.template') && !fs.existsSync(template)) {
        Init.cp(templates[t] + '.template', templates[t]);
        console.log('  Generated', templates[t]);

        replacements = null;
        if (template === 'config/log4j.lcf') {
          replacements = [{
            what: 'INFO, R',
            replaceWith: 'INFO, R, C'
          }, {
            what: 'log4j.category.reloadXml=ERROR',
            replaceWith: 'log4j.category.reloadXml=DEBUG'
          }];
        } else if (template === 'config/Openbravo.properties') {
          replacements = [{
            what: 'deploy.mode=class',
            replaceWith: 'deploy.mode=none'
          }, {
            what: 'safe.mode=true',
            replaceWith: 'safe.mode=false'
          }, {
            what: 'minimizeJSandCSS=yes',
            replaceWith: 'minimizeJSandCSS=no'
          }, {
            what: 'source.path=/opt/openbravo',
            replaceWith: 'source.path=' + fs.realpathSync('.')
          }];
          if (argv.db) {
            console.log('   DB:', argv.db);
            replacements.push({
              what: 'bbdd.sid=openbravo',
              replaceWith: 'bbdd.sid=' + argv.db
            });
          }
        }

        Init.replace(template, replacements);
      } else if (template === '.classpath') {
        eventEmiter.emit('classpathDone');
      }
    }
  },

  cp: function (o, d) {
    var dest = fs.createWriteStream(d);
    var r = fs.createReadStream(o).pipe(dest);
    dest.on('finish', function () {
      if (d === '.classpath') {
        eventEmiter.emit('classpathDone');
      }
    });
  },

  replace: function (file, replacements) {
    if (!replacements) {
      return;
    }

    fs.readFile(file, 'utf8', function (err, data) {
      var r;

      if (err) {
        return console.log(err);
      }
      var result = data;

      for (r = 0; r < replacements.length; r++) {
        result = result.replace(replacements[r].what, replacements[r].replaceWith);
      }

      fs.writeFileSync(file, result, 'utf8');
    });
  },

  fixClassPath: function () {
    var files = fs.readdirSync('modules'),
      f, src, cp, existsInCp, modified = false;

    cp = JSON.parse(xml2js.toJson(fs.readFileSync('.classpath')));

    for (i = 0; i < files.length; i++) {
      f = 'modules/' + files[i];
      if (fs.statSync(f).isDirectory()) {
        src = f + '/src';
        if (fs.existsSync(src)) {
          existsInCp = cp.classpath.classpathentry.filter(function (c) {
            return c.path === src;
          }).length > 0;
          if (!existsInCp) {
            modified = true;
            cp.classpath.classpathentry.unshift({
              kind: 'src',
              path: src
            });
            console.log('  Adding', src, 'to classpath');
          }
        }
      }
    }

    if (modified) {
      fs.writeFileSync('.classpath', pd.xml(xml2js.toXml(cp)) + '\n', 'utf8');
    }
  }
};

if (argv.help) {
  optimist.showHelp();
  return;
}

if (!Init.checkOBWorkspace()) {
  console.error(red, 'Not in Openbravo directory!', reset);
  return;
}

eventEmiter = new events.EventEmitter();

eventEmiter.on('classpathDone', function () {
  Init.fixClassPath();
});

Init.copyTemplates(templates);